extends /template

block content
  script(src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
  script(src="/scripts/new.js", defer)

  section#new-examen.section
    .container
      h1.title #{user.isStudent ? 'Submit' : 'Post'} New Examen
      if user.isStudent
        .notification.is-warning
            p Once written, recorded, and submitted, your examen must be #[b review and approved] by a faculty member before it is posted publicly.
      form.new-examen(@submit.prevent="handleSubmit", method="POST", enctype="multipart/form-data")
        .columns
          .field.column
            label.label(for="title") Title
            .control
              input#title.input(type="text", name="title", v-model="title", required)
          .field.column
            label.label(for="backing-track") Backing Track
            .control
              select#backing-track.input(name="recording", v-model="backingTrack")
                option(value="I Am The Bread Of Life.ogg") Bread of Life
                option(value="Prayer of St. Francis Instrumental.mp3") Prayer of Saint Francis
                option(value="Sweet Hour Of Prayer.m4a") Sweet Hour of Prayer
                option(value="Deep Within.m4a") Deep Within
          .field.column.is-narrow
            label.label(for="visibilty") Who Can View
            .control
              label.radio
                input(type="radio", name="visibility", value="public", v-model="visibility", checked)
                |  Anyone
              label.radio
                input(type="radio", name="visibility", v-model="visibility", value="school")
                |  #{user._school.name} only
              label.radio
                input(type="radio", name="visibility", v-model="visibility", value="private")
                |  You only

        .column
          .field.is-pulled-right
            .control
              label.label.is-inline.delay-label Pause
              input.is-inline.input.delay-input(type="number", v-model.number="introduction.delay", min=0, max=600, required)
          h1.subtitle Introduction
          .field
            .control
              textarea#introduction(type="text", name="introduction", v-model="introduction.text", required)
              .editor.introduction-editor(id="introduction-editor", data-editing="introduction")
          .columns
            .column.is-narrow
              button.button(type="button", @click="toggleRecording('introduction')", :class="introduction.recording ? 'is-danger' : 'is-warning'") {{ introduction.recording ? 'Stop Recording' : 'Start Recording' }}
            .column
              audio(controls, id="introduction-audio", :src="introduction.src")
        hr
        .prompts
          h1.subtitle.is-size-4
            b Prompts
            small.has-text-grey-light  {{ prompts.length }} total

          .box(v-for="(text, index) in prompts")
            .field.is-pulled-right
              .control
                label.label.is-inline.delay-label Pause
                input.is-inline.input.delay-input(type="number", v-model.number="prompts[index].delay", min=0, max=600, required)
            h1.subtitle Prompt {{ index + 1}}
            .field
              .control
                textarea.prompt(type="text", :id="'prompt-' + index", :data-prompt="index", name="prompt", v-model="prompts[index].text", required)
                .editor.prompt-editor(:id="'prompt-' + index + '-editor'", :data-editing="'prompt-' + index", :data-prompt="index")

            hr
            .columns
              .column.is-narrow
                button.button(type="button", @click="toggleRecording(index)", :class="prompts[index].recording ? 'is-danger' : 'is-warning'") {{ prompts[index].recording ? 'Stop Recording' : 'Start Recording' }}
              .column
                audio(controls, :src="prompts[index].src")  
          button.button.is-success(type="button", @click="addPrompt") Add Prompt
          button.button.is-dark(type="button", @click="removePrompt", :disabled="prompts.length === 0") Remove Prompt
          hr

          .field.is-pulled-right
            .control
              label.label.is-inline.delay-label Pause
              input.is-inline.input.delay-input(type="number", v-model.number="closing.delay", min=0, max=600, required)
          .field
            h1.subtitle Closing
            .control
              input#closing(name="closing", v-model="closing.text", required)
              div.editor.closing-editor(data-editing="closing")
          .columns
            .column.is-narrow
              button.button(type="button", @click="toggleRecording('closing')", :class="closing.recording ? 'is-danger' : 'is-warning'") {{ closing.recording ? 'Stop Recording' : 'Start Recording' }}
            .column
              audio(controls, id="closing-audio", :src="closing.src")
        hr
        button.button.is-info.is-large.is-pulled-right #{user.isStudent ? 'Submit' : 'Post'} Examen
